// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: product.sql

package models

import (
	"context"

	"github.com/google/uuid"
)

const CreateProduct = `-- name: CreateProduct :one
INSERT INTO products.products (name,
                               description,
                               picture,
                               price,
                               stock,
                               category_id)
VALUES ($1, $2, $3, $4, $5,$6)
RETURNING id, name, description, picture, price, stock, category_id, created_at, updated_at
`

type CreateProductParams struct {
	Name        string    `json:"name"`
	Description string    `json:"description"`
	Picture     string    `json:"picture"`
	Price       float32   `json:"price"`
	Stock       int32     `json:"stock"`
	CategoryID  uuid.UUID `json:"categoryID"`
}

// CreateProduct
//
//	INSERT INTO products.products (name,
//	                               description,
//	                               picture,
//	                               price,
//	                               stock,
//	                               category_id)
//	VALUES ($1, $2, $3, $4, $5,$6)
//	RETURNING id, name, description, picture, price, stock, category_id, created_at, updated_at
func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (ProductsProducts, error) {
	row := q.db.QueryRow(ctx, CreateProduct,
		arg.Name,
		arg.Description,
		arg.Picture,
		arg.Price,
		arg.Stock,
		arg.CategoryID,
	)
	var i ProductsProducts
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Picture,
		&i.Price,
		&i.Stock,
		&i.CategoryID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeleteProduct = `-- name: DeleteProduct :exec
DELETE
FROM products.products
WHERE id = $1
`

// DeleteProduct
//
//	DELETE
//	FROM products.products
//	WHERE id = $1
func (q *Queries) DeleteProduct(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, DeleteProduct, id)
	return err
}

const GetProduct = `-- name: GetProduct :one
SELECT id, name, description, picture, price, stock, category_id, created_at, updated_at
FROM products.products
WHERE id = $1
LIMIT 1
`

// GetProduct
//
//	SELECT id, name, description, picture, price, stock, category_id, created_at, updated_at
//	FROM products.products
//	WHERE id = $1
//	LIMIT 1
func (q *Queries) GetProduct(ctx context.Context, id uuid.UUID) (ProductsProducts, error) {
	row := q.db.QueryRow(ctx, GetProduct, id)
	var i ProductsProducts
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Picture,
		&i.Price,
		&i.Stock,
		&i.CategoryID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const ListProducts = `-- name: ListProducts :many
SELECT id, name, description, picture, price, stock, category_id, created_at, updated_at
FROM products.products
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListProductsParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

// ListProducts
//
//	SELECT id, name, description, picture, price, stock, category_id, created_at, updated_at
//	FROM products.products
//	ORDER BY created_at DESC
//	LIMIT $1 OFFSET $2
func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]ProductsProducts, error) {
	rows, err := q.db.Query(ctx, ListProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductsProducts
	for rows.Next() {
		var i ProductsProducts
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Picture,
			&i.Price,
			&i.Stock,
			&i.CategoryID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const LockProductStock = `-- name: LockProductStock :one
SELECT stock
FROM products.products
WHERE id = $1
    FOR UPDATE
`

// LockProductStock
//
//	SELECT stock
//	FROM products.products
//	WHERE id = $1
//	    FOR UPDATE
func (q *Queries) LockProductStock(ctx context.Context, id uuid.UUID) (int32, error) {
	row := q.db.QueryRow(ctx, LockProductStock, id)
	var stock int32
	err := row.Scan(&stock)
	return stock, err
}

const UpdateProduct = `-- name: UpdateProduct :one
UPDATE products.products
SET name        = COALESCE($2, name),
    description       = COALESCE($3, description),
    picture       = COALESCE($4, picture),
    price       = COALESCE($5, price),
    stock       = COALESCE($6, stock),
    category_id = COALESCE($7, category_id)
WHERE id = $1
RETURNING id, name, description, picture, price, stock, category_id, created_at, updated_at
`

type UpdateProductParams struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	Picture     string    `json:"picture"`
	Price       float32   `json:"price"`
	Stock       int32     `json:"stock"`
	CategoryID  uuid.UUID `json:"categoryID"`
}

// UpdateProduct
//
//	UPDATE products.products
//	SET name        = COALESCE($2, name),
//	    description       = COALESCE($3, description),
//	    picture       = COALESCE($4, picture),
//	    price       = COALESCE($5, price),
//	    stock       = COALESCE($6, stock),
//	    category_id = COALESCE($7, category_id)
//	WHERE id = $1
//	RETURNING id, name, description, picture, price, stock, category_id, created_at, updated_at
func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (ProductsProducts, error) {
	row := q.db.QueryRow(ctx, UpdateProduct,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Picture,
		arg.Price,
		arg.Stock,
		arg.CategoryID,
	)
	var i ProductsProducts
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Picture,
		&i.Price,
		&i.Stock,
		&i.CategoryID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpdateProductStock = `-- name: UpdateProductStock :exec
UPDATE products.products
SET stock = $2
WHERE id = $1
`

type UpdateProductStockParams struct {
	ID    uuid.UUID `json:"id"`
	Stock int32     `json:"stock"`
}

// UpdateProductStock
//
//	UPDATE products.products
//	SET stock = $2
//	WHERE id = $1
func (q *Queries) UpdateProductStock(ctx context.Context, arg UpdateProductStockParams) error {
	_, err := q.db.Exec(ctx, UpdateProductStock, arg.ID, arg.Stock)
	return err
}
