// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package models

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const AddItem = `-- name: AddItem :one
INSERT INTO cart_schema.carts (user_id, items, updated_at) 
VALUES ($1, $2::jsonb, $3)
RETURNING user_id, items, updated_at
`

type AddItemParams struct {
	UserID    uuid.UUID        `json:"userID"`
	Column2   []byte           `json:"column2"`
	UpdatedAt pgtype.Timestamp `json:"updatedAt"`
}

// AddItem
//
//	INSERT INTO cart_schema.carts (user_id, items, updated_at)
//	VALUES ($1, $2::jsonb, $3)
//	RETURNING user_id, items, updated_at
func (q *Queries) AddItem(ctx context.Context, arg AddItemParams) (CartSchemaCarts, error) {
	row := q.db.QueryRow(ctx, AddItem, arg.UserID, arg.Column2, arg.UpdatedAt)
	var i CartSchemaCarts
	err := row.Scan(&i.UserID, &i.Items, &i.UpdatedAt)
	return i, err
}

const EmptyCart = `-- name: EmptyCart :exec
DELETE 
FROM cart_schema.carts 
WHERE user_id = $1
RETURNING user_id, items, updated_at
`

// EmptyCart
//
//	DELETE
//	FROM cart_schema.carts
//	WHERE user_id = $1
//	RETURNING user_id, items, updated_at
func (q *Queries) EmptyCart(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, EmptyCart, userID)
	return err
}

const GetCart = `-- name: GetCart :one
SELECT items
FROM cart_schema.carts
WHERE user_id = $1
ORDER BY updated_at DESC
`

// GetCart
//
//	SELECT items
//	FROM cart_schema.carts
//	WHERE user_id = $1
//	ORDER BY updated_at DESC
func (q *Queries) GetCart(ctx context.Context, userID uuid.UUID) ([]byte, error) {
	row := q.db.QueryRow(ctx, GetCart, userID)
	var items []byte
	err := row.Scan(&items)
	return items, err
}

const RemoveItem = `-- name: RemoveItem :one
UPDATE cart_schema.carts
SET items = (
    SELECT jsonb_agg(item)
    FROM jsonb_array_elements(items) AS item
    WHERE item->>'product_id' != $1::text
)
WHERE user_id = $2
RETURNING user_id, items, updated_at
`

type RemoveItemParams struct {
	Column1 string    `json:"column1"`
	UserID  uuid.UUID `json:"userID"`
}

// RemoveItem
//
//	UPDATE cart_schema.carts
//	SET items = (
//	    SELECT jsonb_agg(item)
//	    FROM jsonb_array_elements(items) AS item
//	    WHERE item->>'product_id' != $1::text
//	)
//	WHERE user_id = $2
//	RETURNING user_id, items, updated_at
func (q *Queries) RemoveItem(ctx context.Context, arg RemoveItemParams) (CartSchemaCarts, error) {
	row := q.db.QueryRow(ctx, RemoveItem, arg.Column1, arg.UserID)
	var i CartSchemaCarts
	err := row.Scan(&i.UserID, &i.Items, &i.UpdatedAt)
	return i, err
}

const UpdateItem = `-- name: UpdateItem :one
UPDATE cart_schema.carts
SET items = CASE
    -- 如果存在 product_id 为 $1 的商品，更新它的 quantity
    WHEN items @> jsonb_build_array(jsonb_build_object('product_id', $1::text)) THEN
        jsonb_set(
            items,
            '{0,quantity}',  -- 这里的路径为数组索引形式，假设 product_id 对应数组的第一个位置
            $2::jsonb -- 更新 quantity 字段为 $2
        )
    -- 如果不存在，则向 items 数组中添加新的商品
    ELSE
        items || jsonb_build_array(
            jsonb_build_object(
                'product_id', $1::text,
                'quantity', $2::int
            )
        )
    END
WHERE user_id = $3
RETURNING user_id, items, updated_at
`

type UpdateItemParams struct {
	Column1 string    `json:"column1"`
	Column2 []byte    `json:"column2"`
	UserID  uuid.UUID `json:"userID"`
}

// UpdateItem
//
//	UPDATE cart_schema.carts
//	SET items = CASE
//	    -- 如果存在 product_id 为 $1 的商品，更新它的 quantity
//	    WHEN items @> jsonb_build_array(jsonb_build_object('product_id', $1::text)) THEN
//	        jsonb_set(
//	            items,
//	            '{0,quantity}',  -- 这里的路径为数组索引形式，假设 product_id 对应数组的第一个位置
//	            $2::jsonb -- 更新 quantity 字段为 $2
//	        )
//	    -- 如果不存在，则向 items 数组中添加新的商品
//	    ELSE
//	        items || jsonb_build_array(
//	            jsonb_build_object(
//	                'product_id', $1::text,
//	                'quantity', $2::int
//	            )
//	        )
//	    END
//	WHERE user_id = $3
//	RETURNING user_id, items, updated_at
func (q *Queries) UpdateItem(ctx context.Context, arg UpdateItemParams) (CartSchemaCarts, error) {
	row := q.db.QueryRow(ctx, UpdateItem, arg.Column1, arg.Column2, arg.UserID)
	var i CartSchemaCarts
	err := row.Scan(&i.UserID, &i.Items, &i.UpdatedAt)
	return i, err
}
